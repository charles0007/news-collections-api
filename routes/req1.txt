const http = require('http');
const express = require('express');
const redis = require('redis');
const { RateLimiterRedis } = require('rate-limiter-flexible');
const redisClient = redis.createClient({
  enable_offline_queue: false,
});

const cors = require("cors");
const router = express.Router();
var libxml = require("libxmljs");

var xssFilters = require('xss-filters');

const uuid = require('uuid');

// to encrypt password
// bcrypt


const maxWrongAttemptsByIPperDay = 100;
const maxConsecutiveFailsByUsernameAndIP = 10;

const limiterSlowBruteByIP = new RateLimiterRedis({
  storeClient: redisClient,
  keyPrefix: 'login_fail_ip_per_day',
  points: maxWrongAttemptsByIPperDay,
  duration: 60 * 60 * 24,
  blockDuration: 60 * 60 * 24, // Block for 1 day, if 100 wrong attempts per day
});

const limiterConsecutiveFailsByUsernameAndIP = new RateLimiterRedis({
  storeClient: redisClient,
  keyPrefix: 'login_fail_consecutive_username_and_ip',
  points: maxConsecutiveFailsByUsernameAndIP,
  duration: 60 * 60 * 24 * 90, // Store number for 90 days since first fail
  blockDuration: 60 * 60, // Block for 1 hour
});




router.post('/', async function (req, res) {

    try{

        const getUsernameIPkey = (username, ip) => `${username}_${ip}`;

    const params = req.query;
    const body = req.body;
    const name = xssFilters.inHTMLData(body.name)

    var parserOptions = {
        noblanks: true,
        noent: false,
        nocdata: true
    };
    
var user = { 
    username: 'Gourav', 
    email: 'gourav@gmail.com', 
    date_of_birth: '2020-8-11', 
    account_status: 'activated'
} 
  
response = validateUser(user) 
if(response.error) 
{   
    console.log(response.error.details) 
} 
else
{ 
    // success
} 

    try {

        var doc = libxml.parseXmlString(data, parserOptions);
    } catch (e) {

        return Promise.reject('Xml parsing error');
    }
    }catch(er){

    }

});


var validateUser= (data)=> { 
    const JoiSchema = Joi.object({ 
        username: Joi.string().min(5).max(30).required(), 
        email: Joi.string().email().min(5).max(50).optional(),  
        date_of_birth: Joi.date().optional(),  
        account_status: Joi.string().valid('activated') 
                      .valid('unactivated').optional(), 
    }).options({ abortEarly: false }); 
  
    return JoiSchema.validate(data) 
} 

function failed(){
    const ipAddr = req.ip;
  const usernameIPkey = getUsernameIPkey(req.body.email, ipAddr);

  const [resUsernameAndIP, resSlowByIP] = await Promise.all([
    limiterConsecutiveFailsByUsernameAndIP.get(usernameIPkey),
    limiterSlowBruteByIP.get(ipAddr),
  ]);

  let retrySecs = 0;

  // Check if IP or Username + IP is already blocked
  if (resSlowByIP !== null && resSlowByIP.consumedPoints > maxWrongAttemptsByIPperDay) {
    retrySecs = Math.round(resSlowByIP.msBeforeNext / 1000) || 1;
  } else if (resUsernameAndIP !== null && resUsernameAndIP.consumedPoints > maxConsecutiveFailsByUsernameAndIP) {
    retrySecs = Math.round(resUsernameAndIP.msBeforeNext / 1000) || 1;
  }

  if (retrySecs > 0) {
    res.set('Retry-After', String(retrySecs));
    res.status(429).send('Too Many Requests');
    return true;
  } else {
      return false;
  }
}
module.exports = router;

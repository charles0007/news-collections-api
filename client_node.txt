
var cookieParser = require('cookie-parser') // npm install cookie-parser
var session = require('express-session')
var csrf = require('csurf') // npm install csurf

var bodyParser = require('body-parser') 

var express = require('express')

// setup route middlewares

var csrfProtection = csrf({ cookie: true })

var parseForm = bodyParser.urlencoded({ extended: false })

// create express app

var app = express()


// parse cookies

// we need this because "cookie" is true in csrfProtection

app.use(cookieParser())


app.get('/form', csrfProtection, function (req, res) {

  // pass the csrfToken to the view

  if (req.session.views) {}

  res.render('send', { csrfToken: req.csrfToken() })

})


app.post('/process', parseForm, csrfProtection, function (req, res) {

  res.send('data is being processed')

})
// views/forms.html

  <form action="/process" method="POST">

    ...

    <input type="hidden" name="_csrf" value="{{ csrftoken }}">

    ...

  </form>

  
  // using the express session middleware
app.use(session({  
 secret: 'youruniquesecret', // secret string used in the signing of the session ID that is stored in the cookie
 name: 'youruniquename', // set a unique name to remove the default connect.sid
 cookie: {
   httpOnly: true, // minimize risk of XSS attacks by restricting the client from reading the cookie
   secure: true, // only send cookie over https
   maxAge: 60000*60*24 // set cookie expiry length in ms
 }
}));